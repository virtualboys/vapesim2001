
#pragma kernel CSMain

RWTexture3D<float> Divergence;

Texture3D<float4> Velocity;
Texture3D<float4> BoundaryNormals;

SamplerState _PointClamp;

float w, h, d;



float3 GetVelocity(float3 pos, float3 offset) 
{
	float3 normal = BoundaryNormals.SampleLevel(_PointClamp, pos + offset, 0).xyz;
	if(normal.x != 0 || normal.y != 0 || normal.z != 0) 
		return float3(0,0,0);
	else
		return Velocity.SampleLevel(_PointClamp, pos + offset, 0).xyz;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 right = float3(1,0,0);
	float3 top = float3(0,1,0);
	float3 back = float3(0,0,1);

    float3 pos = float3((id.x+.5f) / w, (id.y+.5f) / h, (id.z+.5f) / d);

	float3 vRt = GetVelocity(pos, right / w);
	float3 vLt = GetVelocity(pos, -right / w);
	float3 vTp = GetVelocity(pos, top / h);
	float3 vBm = GetVelocity(pos, -top / h);
	float3 vBk = GetVelocity(pos, back / d);
	float3 vFt = GetVelocity(pos, -back / d);

	Divergence[id] = .5f * ((vRt.x - vLt.x) + (vTp.y - vBm.y) + (vBk.z - vFt.z));
}


