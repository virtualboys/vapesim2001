
#pragma kernel CSMain

RWTexture3D<float4> ResultVelocity;
RWTexture3D<float4> ResultParticles;

Texture3D<float4> Velocity;
Texture3D<float4> Particles;

Texture3D<float4> BoundaryNormals;

SamplerState _PointClamp;


float w, h, d;
float4 splatPos;
float4 splatColor;
float splatSize;
float4 impulse;

bool IsOnBoundary(float3 pos)
{
	float3 normal = BoundaryNormals.SampleLevel(_PointClamp, pos, 0).xyz;
	return (normal.x != 0 || normal.y != 0 || normal.z != 0);
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 pos = float3((id.x+.5f) / w, (id.y+.5f) / h, (id.z+.5f) / d);

	if(IsOnBoundary(pos))
		return;

	float dist = length(float3(id.x,id.y,id.z) - splatPos) * splatSize;
	float scale = exp(-dist*dist);

	float4 v = impulse * scale;
	float4 c = splatColor * scale;

	ResultVelocity[id.xyz] = Velocity.SampleLevel(_PointClamp, pos, 0) + v;
	ResultParticles[id.xyz] = Particles.SampleLevel(_PointClamp, pos, 0) + c;
}