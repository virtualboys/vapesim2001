
#pragma kernel CSMain

RWTexture3D<float4> ResultVelocity;

Texture3D<float> Pressure;
Texture3D<float4> Velocity;
Texture3D<float4> BoundaryNormals;

SamplerState _PointClamp;

float w, h, d;

bool IsOnBoundary(float3 pos)
{
	float3 normal = BoundaryNormals.SampleLevel(_PointClamp, pos, 0).xyz;
	return (normal.x != 0 || normal.y != 0 || normal.z != 0);
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 right = float3(1,0,0);
	float3 top = float3(0,1,0);
	float3 back = float3(0,0,1);

    float3 pos = float3((id.x+.5f) / w, (id.y+.5f) / h, (id.z+.5f) / d);
	float3 rt = pos + right / w;
	float3 lt = pos - right / w;
	float3 tp = pos + top / h;
	float3 bm = pos - top / h;
	float3 bk = pos + back / d;
	float3 ft = pos - back / d;

	float pC = Pressure.SampleLevel(_PointClamp, pos, 0);

	float pRt = Pressure.SampleLevel(_PointClamp, rt, 0);
	float pLt = Pressure.SampleLevel(_PointClamp, lt, 0);
	float pTp = Pressure.SampleLevel(_PointClamp, tp, 0);
	float pBm = Pressure.SampleLevel(_PointClamp, bm, 0);
	float pBk = Pressure.SampleLevel(_PointClamp, bk, 0);
	float pFt = Pressure.SampleLevel(_PointClamp, ft, 0);

	float3 vMask = float3(1,1,1);
	if(IsOnBoundary(rt)) { pRt = pC; vMask.x = 0; }
	if(IsOnBoundary(lt)) { pLt = pC; vMask.x = 0; }
	if(IsOnBoundary(tp)) { pTp = pC; vMask.y = 0; }
	if(IsOnBoundary(bm)) { pBm = pC; vMask.y = 0; }
	if(IsOnBoundary(bk)) { pBk = pC; vMask.z = 0; }
	if(IsOnBoundary(ft)) { pFt = pC; vMask.z = 0; }

	float3 gradP = 0.5 * float3(pRt - pLt, pTp - pBm, pBk - pFt);  

	float3 vel = Velocity.SampleLevel(_PointClamp, pos, 0).xyz - gradP;  
	ResultVelocity[id] = float4(vMask * vel, 0); 
}


